export class FAQSection extends HTMLElement {
    constructor () {
        super();
        this.header = "Частые вопросы";        
    }
    connectedCallback() {  
        this.render();
    } 
    static get observedAttributes() {
        return []; 
    } 
    attributeChangedCallback(attr, prev, next) {
        if(prev !== next) {
          this[`${attr}`] = next;
          this.render();
       }
    }
    render() {
        this.innerHTML = `
        <style>           
        </style> 
        <section class="faq-section">
            <h3>Какие инструменты необходимы для работы для работы</h3>
            <p>Редактор кода + браузер. Разработчиком используется свободная версия VSCode от Microsoft, с настроенным окружением для работы с применяемыми технологиями.</p>
            <h3>Что там со стилями?</h3>
            <p>Обычный CSS3. Предустановленные стили легко изменить в основном файле стилей 'main.css'. Так, основные цвета определены  в :root, и их имена интуитивно понятны. Если по замыслу проекта понадобятся собственные глобальные стили, их можно определить в  файле следующем после 'main.css'. В этой демо-версии пользовательские глобальные стили определены в файле current.css.  Локальные стили лучше определять в каждом пользовательском элементе. Чтобы избежать перекрёстных стилей, потомкам лучше назначать классы связанные с именем корневого пользовательского элемента, в котором переопределяется стиль. Так, при необходимости тег &lt;h2&gt; в пользовательском элементе &lt;intro-section&gt; можно обозначить intro-section h2 или присвоить ему класс h2.introSection</p>

            <h3>Что с адаптивностью?</h3>
            <p>По умолчанию, стили привязаны к четырём медиазапросам:
                <ul>
                    <li>@media (max-width: 1199.98px); </li>
                    <li>@media (max-width: 991.98px);</li>
                    <li>@media (max-width: 767.98px),(orientation: portrait); и</li>
                    <li>@media (max-width: 575.98px)</li>
                </ul>
            В основном файле шаблона минимум стилей, всё для свободы творчества. Впрочем, любые библиотеки всегда можно подключить с помощью @import. Так, в эту демо-версию и в пустой шаблон из папки '/assets/styles/css' подключена библотека normalize.css </p>
            <h3>Что с реактивностью?</h3>
            <p>Шаблон это не фреймворк. Под задачи шаблона подобрана файловая структура и определён минимальный набор правил. Всё остальное на предпочтение разработчиков. Реактивность в этой демо версии реализована через технологию <a href="https://developer.mozilla.org/ru/docs/Web/API/MutationObserver" target="_blank">Mutation Observer</a></p>
            <h3>Плюсы и минусы</h3>
            <h4>Плюсы</h4>
            <ul>
                <li>Изначально разработан, как завершённый этап всей рутинной работы в реализации проекта одностраничника. Дальше творчество.</li>
                <li>Изначально встроена возможность отстраниться от использования тяжелых инструментов веб разработчика, которые требуют дополнительных ресурсов на изучение их функционала, и их языков архитектуры;</li>
                <li>Модульный подход используемых  технологий даёт возможность разработки модулей отдельно от основного проекта и их встраивания в общую структуру по готовности.</li>
                <li>В репозитории присутствует набор готовых типовых решений, по принципу "наполняй и пользуйся"(в разработке)</li>
                <li>В репозитории присутствует собственная библиотека компонентов и модулей, всегда готовых встроиться в структуру проекта(в разработке)</li>
            </ul>
            <h4>Минусы</h4>
            <ul>
                <li>Надо знать и обновлять знания в используемых технологиях HTML+CSS+JS+Web Components.</li>
                <li>Позже вылезут</li>
                <li>Позже ещё вылезут</li>
            </ul>
            
        </section>
        `;
    }
}