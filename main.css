/* Roboto variable font as default */
@import url('https://fonts.googleapis.com/css2?family=Roboto+Slab:wght@100;200;300;400;500;600;700&display=swap'); 

/*normalize.css as default. Uncomment, if you use this main.css in your project*/
/*@import url(/assets/css/normalize.css);*/

/*---Defining colors are hard to me, please procced your own. Will glad to review any findings---*/
:root {
    --color-alfa: ;/* 'alfa' means primary */
    --color-beta: ;/* 'beta' means secondary */
    --color-theta: ; /* 'typography' for text tags like h2, e.c. */
    --color-text: ; /* general */
    --color-text-light: ;
    --color-selected: ;
    --color-disabled: ;
    --color-details: ;
    --color-outcast: ;
    --color-frozen: ;
    --color-other: ;
    --color-test: ;
}
html, body {
    min-height: 100vh;
}
body {
    background: ;
    position: relative;
    display: flex; /*--need check for a long time---*/
    flex-flow: column; /*--need check for a long time---*/
    font-family: 'Roboto Slab', serif;
    font-weight: 300;
    word-break: normal;
    color: var(--color-text);
}

/*---end general styles---*/

/*---Typography---*/
h1 {
    font-weight: 400;
}
h2 {
    font-weight: 600;
}
h3 {
    font-weight: 600;
}
h4 {
    font-weight: 600;
}
h5 {
    font-weight: 700;
}
h6 {
    color: var(); 
    font-weight: 700;
}
a, a:visited {
    color: var();
    text-decoration: none;
    margin: 0;
    white-space: nowrap;
}
b {
    font-weight: 600;
}
p, h1, h2, h3, h4, ul {
    text-indent: 24px;
}

ul {
    margin-top: 10px;
}
.hashtags {
    word-break: break-word;
}
/*--- Next is template css for plain svg, and not checked for font-icons or background: url(''). Sometimes I work with <object> and prepare Web Components from svg. It's giving advantage to work with styles animation and behaviour with eas. Chek if interested on github. Otherwise, You can skip this rules,  by adding comment, even remove them completely---*/

svg-item, .svg-item {
    position: relative;
    display: inline-block;
    z-index: -1;
}
svg-item.txt-SVG-item, .svg-item.txt-SVG-item {
  width: 25px;
  height: 25px;
}

.f-centered {
    display: flex; 
    align-items: center;
    justify-content: center;
}
/*positioning adaptivness*/
/*---article mostly using for blog, either posts---*/
main, nav, footer, article {
    padding: 0 10%;
}
main {
    display: flex;    
    flex: 1 0 auto;
    max-width: 100%;
}

/*---Further are media queries, which help with adaptivness.
As seen, there is not many rules, I simply check, and add some when it works.
DRY KISS YAGNEE---*/

@media (max-width: 1199.98px) {}

@media (max-width: 991.98px) {
    main, nav, footer, article {
        padding: 0 5%;
    }
    p, h1, h2, h3, h4, ul {
        text-indent: 19px;
    }
    a, a:visited {       
        white-space: normal;
    }
   
}

@media (max-width: 767.98px),
(orientation: portrait) {
    main, nav, footer {
        padding: 0 1%;
    } 
    article {
        padding: 0 4%;
    }
    p, h1, h2, h3, h4, ul {
        text-indent: 15px;
    }
    
}

@media (max-width: 575.98px) {
    article {
        padding: 0 3%;
    }
}
/*---Please, notice that , this is template only, not the library in any event.
Scoped css, web components and other modern throwing away all this bullsheet, such as col-md, md-xl, md-xxl, large , md12-13-14,  col-256 and other class and general hell. Good luck in coding---*/